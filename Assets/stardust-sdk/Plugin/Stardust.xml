<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Stardust</name>
    </assembly>
    <members>
        <member name="T:com.Neogoma.Stardust.API.APIAutoLogin">
            <summary>
            Monobehavior script used to login the user on startup use this to login on awake automatically
            </summary>
        </member>
        <member name="F:com.Neogoma.Stardust.API.APIAutoLogin.email">
            <summary>
            User email
            </summary>
        </member>
        <member name="F:com.Neogoma.Stardust.API.APIAutoLogin.password">
            <summary>
            User password
            </summary>
        </member>
        <member name="T:com.Neogoma.Stardust.API.IDeviceLocationProvider">
            <summary>
            Defines a class that will provide the SDK with the device position in real time
            </summary>
        </member>
        <member name="M:com.Neogoma.Stardust.API.IDeviceLocationProvider.GetPosition">
            <summary>
            This method will returns the device position in real time IN THE MAP
            </summary>
            <returns>Returns the device position in a <see cref="T:UnityEngine.Vector3"/> format</returns>
        </member>
        <member name="M:com.Neogoma.Stardust.API.IDeviceLocationProvider.GetRotation">
            <summary>
            This method will return the device rotation in real time IN THE MAP
            </summary>
            <returns><see cref="T:UnityEngine.Quaternion"/> that represents the rotation</returns>
        </member>
        <member name="T:com.Neogoma.Stardust.API.Impl.CameraImageProvider">
            <summary>
            This class provides the camera image as a byte array in an <see cref="T:com.Neogoma.Stardust.API.Impl.PictureProcessingReady"/> event<br></br>
            Notifies:<br></br>
            <see cref="F:com.Neogoma.HoboDream.InteractiveEventAction.SUCCESS"/> with a <see cref="T:com.Neogoma.Stardust.API.Impl.PictureProcessingReady"/> in case of sucess<br></br>
            <see cref="F:com.Neogoma.HoboDream.InteractiveEventAction.FAILURE"/> in case or failure to get the picutre
            </summary>
        </member>
        <member name="T:com.Neogoma.Stardust.API.Impl.CameraIntrisicsProvider">
            <summary>
            Delegate class to return the camera intrisics parameter
            </summary>
        </member>
        <member name="M:com.Neogoma.Stardust.API.Impl.CameraIntrisicsProvider.GetCameraInstrinscs">
            <summary>
            Returns the intrisics data for the camera
            </summary>
            <returns></returns>
        </member>
        <member name="T:com.Neogoma.Stardust.API.Impl.PictureProcessingReady">
            <summary>
            <see cref="T:com.Neogoma.HoboDream.Impl.BaseInteractionEvent"/> used to transfer the picture data from the <see cref="T:com.Neogoma.Stardust.API.Impl.CameraImageProvider"/>
            </summary>
        </member>
        <member name="P:com.Neogoma.Stardust.API.Impl.PictureProcessingReady.Data">
            <summary>
            Returns the picture data as a byte array
            </summary>
        </member>
        <member name="T:com.Neogoma.Stardust.API.IPictureDataReady">
            <summary>
            Interface that defines an event to transmit processed picture data from <see cref="T:com.Neogoma.Stardust.API.ICameraImageProvider"/>
            </summary>
        </member>
        <member name="M:com.Neogoma.Stardust.API.IPictureDataReady.GetJPEGData">
            <summary>
            Returns the byte data of the JPEG picture
            </summary>
            <returns>byte array of the JPEG data</returns>
        </member>
        <member name="T:com.Neogoma.Stardust.API.LoginController">
            <summary>
            Monobehavior used to log the user in the server
            </summary>
        </member>
        <member name="M:com.Neogoma.Stardust.API.LoginController.Login(System.String,System.String)">
            <summary>
            Logs the user into the system
            </summary>
            <param name="email">User email</param>
            <param name="password">User's password</param>
        </member>
        <member name="T:com.Neogoma.Stardust.API.Mapping.AbstractDataUploader">
            <summary>
            Abstract class to sending mapping datas to server
            </summary>
        </member>
        <member name="T:com.Neogoma.Stardust.API.Mapping.AbstractDataUploader.DataUpdateFrequency">
            <summary>
            Designating the frequency
            </summary>
        </member>
        <member name="F:com.Neogoma.Stardust.API.Mapping.AbstractDataUploader.updateFrequency">
            <summary>
            Frequency to send the data
            </summary>
        </member>
        <member name="F:com.Neogoma.Stardust.API.Mapping.AbstractDataUploader.pointCloudManager">
            <summary>
            PointCloudManager
            </summary>
        </member>
        <member name="P:com.Neogoma.Stardust.API.Mapping.AbstractDataUploader.ID">
            <summary>
            Returns the session ID
            </summary>
        </member>
        <member name="P:com.Neogoma.Stardust.API.Mapping.AbstractDataUploader.HTTPConnector">
            <summary>
            Returns the HTTP connector
            </summary>
        </member>
        <member name="M:com.Neogoma.Stardust.API.Mapping.AbstractDataUploader.GenerateMap">
            <summary>
            Generates the map
            </summary>
        </member>
        <member name="M:com.Neogoma.Stardust.API.Mapping.AbstractDataUploader.UpdateMap">
            <summary>
            Updates the map with latest pictures
            </summary>
        </member>
        <member name="M:com.Neogoma.Stardust.API.Mapping.AbstractDataUploader.StartSendingData">
            <summary>
            Start sending datas to the server
            </summary>
        </member>
        <member name="M:com.Neogoma.Stardust.API.Mapping.AbstractDataUploader.StopSendingDatas">
            <summary>
            Stop sending datas to the server
            </summary>
        </member>
        <member name="M:com.Neogoma.Stardust.API.Mapping.AbstractDataUploader.SetSession(com.Neogoma.Stardust.Datamodel.Session)">
            <summary>
            Sets the current session
            </summary>
            <param name="sessionData"></param>
        </member>
        <member name="M:com.Neogoma.Stardust.API.Mapping.AbstractDataUploader.GetDeviceLocationProvider">
            <summary>
            Returns the device location provider
            </summary>
            <returns></returns>
        </member>
        <member name="M:com.Neogoma.Stardust.API.Mapping.AbstractDataUploader.GetIntrisicsProvider">
            <summary>
            Returns an intrisics provider, if not overriden will use the default implementation
            </summary>
            <returns></returns>
        </member>
        <member name="M:com.Neogoma.Stardust.API.Mapping.AbstractDataUploader.GetCameraImageProvider">
            <summary>
            Returns an intrisics provider if not overriden will use the default implementation
            </summary>
            <returns></returns>
        </member>
        <member name="M:com.Neogoma.Stardust.API.Mapping.AbstractDataUploader.HandleRequest(System.String,System.String)">
            <summary>
            Handles the request after all the data mapping procedure
            </summary>
            <param name="jsonResult"></param>
            <param name="key"></param>
        </member>
        <member name="M:com.Neogoma.Stardust.API.Mapping.AbstractDataUploader.HandleRequestFailed(System.String,System.String)">
            <summary>
            Handles a request failer
            </summary>
            <param name="jsonResult"></param>
            <param name="key"></param>
        </member>
        <member name="M:com.Neogoma.Stardust.API.Mapping.AbstractDataUploader.HandleSubEvent(com.Neogoma.HoboDream.IInteractionEvent)">
            <summary>
            Handles event
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:com.Neogoma.Stardust.API.Mapping.AbstractDataUploader.DoOnAwake">
            <summary>
            Awke routine
            </summary>
        </member>
        <member name="M:com.Neogoma.Stardust.API.Mapping.AbstractDataUploader.OnDataCaptured">
            <summary>
            Method called when data was captured
            </summary>
        </member>
        <member name="M:com.Neogoma.Stardust.API.Mapping.AbstractDataUploader.OnDataSentSuccess">
            <summary>
            When the datas were sent sucessfully
            </summary>
        </member>
        <member name="M:com.Neogoma.Stardust.API.Mapping.AbstractDataUploader.OnDataSentFailure">
            <summary>
            When the datas sending failed
            </summary>
        </member>
        <member name="M:com.Neogoma.Stardust.API.Mapping.AbstractDataUploader.OnDataLimitReached">
            <summary>
            Called when the data limit for the map was reached
            </summary>
        </member>
        <member name="M:com.Neogoma.Stardust.API.Mapping.AbstractDataUploader.GetSupportedEventsForSubclass">
            <summary>
            Returns the event managed by the subclass
            </summary>
            <returns></returns>
        </member>
        <member name="T:com.Neogoma.Stardust.API.ICameraImageIntrisicsProvider">
            <summary>
            This class will provide the camera intrisics data in real time.
            </summary>
        </member>
        <member name="M:com.Neogoma.Stardust.API.ICameraImageIntrisicsProvider.GetCameraInstrinscs">
            <summary>
            Returns the current camera intrisics
            </summary>
            <returns></returns>
        </member>
        <member name="T:com.Neogoma.Stardust.API.ICameraImageProvider">
            <summary>
            This interface defines a class that converts the camera seen by the device
            </summary>
        </member>
        <member name="M:com.Neogoma.Stardust.API.ICameraImageProvider.InitializeCamera">
            <summary>
            This method initializes the camera device (setup resolution/frequency....)
            </summary>
        </member>
        <member name="M:com.Neogoma.Stardust.API.ICameraImageProvider.ComputeImageData">
            <summary>
            This methods is used to start transforming the current image in a proper format.<br></br>
            Once the picture process conversion is finished, it should notify an <see cref="T:com.Neogoma.Stardust.API.IPictureDataReady"/> event with <see cref="F:com.Neogoma.HoboDream.InteractiveEventAction.SUCCESS"/> type if the picture can be processed<br></br>
            It notifies an <see cref="F:com.Neogoma.HoboDream.InteractiveEventAction.FAILURE"/> event in case of failure to process the picture
            </summary>
        </member>
        <member name="T:com.Neogoma.Stardust.API.PersistenceObject.AbstractBundleDisplayer">
            <summary>
            Load bundle abstract prefab extend this class to define your own behaviors
            </summary>
        </member>
        <member name="F:com.Neogoma.Stardust.API.PersistenceObject.AbstractBundleDisplayer.loadingEvent">
            <summary>
            When the loading starts
            </summary>
        </member>
        <member name="F:com.Neogoma.Stardust.API.PersistenceObject.AbstractBundleDisplayer.downloadFailed">
            <summary>
            When the download fails
            </summary>
        </member>
        <member name="F:com.Neogoma.Stardust.API.PersistenceObject.AbstractBundleDisplayer.downloadFinished">
            <summary>
            When the download is finished
            </summary>
        </member>
        <member name="M:com.Neogoma.Stardust.API.PersistenceObject.AbstractBundleDisplayer.Initialize(com.Neogoma.HoboDream.Network.IBundleDownloader{System.String,com.Neogoma.HoboDream.Network.IBundleDownloadListener},com.Neogoma.HoboDream.Network.IHTTPConnector{System.String,com.Neogoma.HoboDream.Network.IJSonRequestListener},com.Neogoma.Stardust.Datamodel.PersistenceModel)">
            <summary>
            Initialize
            </summary>
            <param name="bundledownloader"></param>
        </member>
        <member name="M:com.Neogoma.Stardust.API.PersistenceObject.AbstractBundleDisplayer.InstantiateBundle(com.Neogoma.HoboDream.Network.IBundleDownloadListener)">
            <summary>
            create gameObject
            </summary>
        </member>
        <member name="M:com.Neogoma.Stardust.API.PersistenceObject.AbstractBundleDisplayer.Redownload">
            <summary>
            redownload bundle
            </summary>
        </member>
        <member name="M:com.Neogoma.Stardust.API.PersistenceObject.AbstractBundleDisplayer.CheckBundleStatus(System.String,System.String,com.Neogoma.HoboDream.Network.IBundleDownloader{System.String,com.Neogoma.HoboDream.Network.IBundleDownloadListener})">
            <summary>
            Check Bundle Status
            </summary>
            <param name="markerID"></param>
            <param name="bundleId"></param>
            <param name="bundledownloader"></param>
        </member>
        <member name="M:com.Neogoma.Stardust.API.PersistenceObject.AbstractBundleDisplayer.DownloadBundle(System.String,System.String,UnityEngine.Hash128,com.Neogoma.HoboDream.Network.IBundleDownloader{System.String,com.Neogoma.HoboDream.Network.IBundleDownloadListener})">
            <summary>
            Download Bundle
            </summary>
            <param name="bundleName"></param>
            <param name="bundleId"></param>
            <param name="bundledownloader"></param>
        </member>
        <member name="M:com.Neogoma.Stardust.API.PersistenceObject.AbstractBundleDisplayer.ObjectLoadedSucessfully(UnityEngine.GameObject)">
            <summary>
            Called when the object has sucessfully been created
            </summary>
            <param name="obj">Instance of the object</param>
        </member>
        <member name="M:com.Neogoma.Stardust.API.PersistenceObject.AbstractBundleDisplayer.OnDownloadUpdate(System.Single)">
            <summary>
            Called when an update occurs on the download
            </summary>
            <param name="percentage">Download status from 0 to 1</param>
        </member>
        <member name="M:com.Neogoma.Stardust.API.PersistenceObject.AbstractBundleDisplayer.ObjectLoadedFailure">
            <summary>
            Called when the object download has failed
            </summary>
        </member>
        <member name="T:com.Neogoma.Stardust.API.PersistenceObject.BundleDisplayerExample">
            <summary>
            Base extension of <see cref="T:com.Neogoma.Stardust.API.PersistenceObject.AbstractBundleDisplayer"/>
            </summary>
        </member>
        <member name="F:com.Neogoma.Stardust.API.PersistenceObject.BundleDisplayerExample.progressBg">
            <summary>
            Progress backgroud
            </summary>
        </member>
        <member name="T:com.Neogoma.Stardust.API.PersistenceObject.ObjectCacher">
            <summary>
            cache object
            </summary>
        </member>
        <member name="M:com.Neogoma.Stardust.API.PersistenceObject.ObjectCacher.SetupDownloadStatus(System.String)">
            <summary>
            setup bundle downloading occuring state
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:com.Neogoma.Stardust.API.PersistenceObject.ObjectCacher.IsDownloadingNow(System.String)">
            <summary>
            check if current bundle is donwloading or not
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:com.Neogoma.Stardust.API.PersistenceObject.ObjectCacher.AddToDictionary(System.String,UnityEngine.GameObject)">
            <summary>
            cache loaded bundle gameobject
            </summary>
            <param name="id"></param>
            <param name="obj"></param>
        </member>
        <member name="M:com.Neogoma.Stardust.API.PersistenceObject.ObjectCacher.GetObject(System.String)">
            <summary>
            get current cached bundle gameobject
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:com.Neogoma.Stardust.API.PersistenceObject.ObjectCacher.IsBundleInCache(System.String)">
            <summary>
            check if bundle is in cache or not
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:com.Neogoma.Stardust.API.PersistenceObject.ObjectController">
            <summary>
            Class used for all the object management
            </summary>
        </member>
        <member name="F:com.Neogoma.Stardust.API.PersistenceObject.ObjectController.bundleHolder">
            <summary>
            bundle holder prefab
            </summary>
        </member>
        <member name="M:com.Neogoma.Stardust.API.PersistenceObject.ObjectController.Clean">
            <summary>
            clean object instances container
            </summary>
        </member>
        <member name="M:com.Neogoma.Stardust.API.PersistenceObject.ObjectController.CreateInstance(com.Neogoma.Stardust.Datamodel.PersistenceModel,UnityEngine.Transform)">
            <summary>
            create persistence gameObject
            </summary>
            <param name="persistenceModel"></param>
        </member>
        <member name="M:com.Neogoma.Stardust.API.PersistenceObject.ObjectController.GetGameObjectForModel(com.Neogoma.Stardust.Datamodel.PersistenceModel)">
            <summary>
            get gameobject for current persistenceModel
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:com.Neogoma.Stardust.API.PersistenceObject.ObjectController.GetAllModelsInScene">
            <summary>
            get all persistenceModels
            </summary>
            <returns></returns>
        </member>
        <member name="M:com.Neogoma.Stardust.API.PersistenceObject.ObjectController.GetAllObjectsInScene">
            <summary>
            get all gameobjects
            </summary>
            <returns></returns>
        </member>
        <member name="M:com.Neogoma.Stardust.API.PersistenceObject.ObjectController.SaveObjectInstance(com.Neogoma.Stardust.Datamodel.PersistenceModel)">
            <summary>
            save object to database
            </summary>
            <param name="persistenceModel"></param>
        </member>
        <member name="M:com.Neogoma.Stardust.API.PersistenceObject.ObjectController.CreateObjectInstances(com.Neogoma.Stardust.Datamodel.PersistenceModel[],UnityEngine.Transform)">
            <summary>
            create multiple objects
            </summary>
            <param name="modelList"></param>
            <param name="parent"></param>
        </member>
        <member name="M:com.Neogoma.Stardust.API.PersistenceObject.ObjectController.DeleteAllObjects(System.String)">
            <summary>
            delete all persistence objects for a session
            </summary>
            <param name="session_id"></param>
        </member>
        <member name="M:com.Neogoma.Stardust.API.PersistenceObject.ObjectController.DeleteInstance(com.Neogoma.Stardust.Datamodel.PersistenceModel)">
            <summary>
            delete a persistence object
            </summary>
            <param name="persistenceModel"></param>
        </member>
        <member name="M:com.Neogoma.Stardust.API.PersistenceObject.ObjectController.RequestAllObjects">
            <summary>
            request to get all persistence objects
            </summary>
        </member>
        <member name="M:com.Neogoma.Stardust.API.PersistenceObject.ObjectController.GetAllAvailableObjects">
            <summary>
            get all persistence objects
            </summary>
            <returns></returns>
        </member>
        <member name="T:com.Neogoma.Stardust.API.Relocation.AbstractMapManager">
            <summary>
            Abstract class to manage the maps datas. <see cref="T:com.Neogoma.HoboDream.IInteractiveElementListener"/> and <see cref="T:com.Neogoma.HoboDream.Network.IJSonRequestListener"/>
            </summary>
        </member>
        <member name="F:com.Neogoma.Stardust.API.Relocation.AbstractMapManager.originPrefab">
            <summary>
            Prefab to show the map origin (NOT MANDATORY)
            </summary>
        </member>
        <member name="P:com.Neogoma.Stardust.API.Relocation.AbstractMapManager.HTTPConnector">
            <summary>
            Returns the http connector
            </summary>
        </member>
        <member name="M:com.Neogoma.Stardust.API.Relocation.AbstractMapManager.GetDataForMap(System.Int32)">
            <summary>
            Requests the datas for map ID given in parameter
            </summary>
            <param name="sessionId"></param>
        </member>
        <member name="M:com.Neogoma.Stardust.API.Relocation.AbstractMapManager.LocateCurrentPosition">
            <summary>
            Requests to locate the current position
            </summary>
        </member>
        <member name="M:com.Neogoma.Stardust.API.Relocation.AbstractMapManager.GetIntrisicsProvider">
            <summary>
            This methods returns a provider of intrisics data
            </summary>
            <returns><see cref="T:com.Neogoma.Stardust.API.ICameraImageIntrisicsProvider"/>Intrisics provider</returns>
        </member>
        <member name="M:com.Neogoma.Stardust.API.Relocation.AbstractMapManager.GetCameraImageProvider">
            <summary>
            Return the camera image provider 
            </summary>
            <returns></returns>
        </member>
        <member name="M:com.Neogoma.Stardust.API.Relocation.AbstractMapManager.GetDeviceLocationProvider">
            <summary>
            Returns the device location provider
            </summary>
            <returns></returns>
        </member>
        <member name="M:com.Neogoma.Stardust.API.Relocation.AbstractMapManager.GetSupportedEventsForSubclass">
            <summary>
            Returns the events handled by the class extension
            </summary>
            <returns>An array of <see cref="T:com.Neogoma.HoboDream.InteractiveEventAction"/></returns>
        </member>
        <member name="M:com.Neogoma.Stardust.API.Relocation.AbstractMapManager.OnHandleEvent(com.Neogoma.HoboDream.IInteractionEvent)">
            <summary>
            Handle the events on the class extensions
            </summary>
            <param name="eve"><see cref="T:com.Neogoma.HoboDream.IInteractionEvent"/> that contains the event triggered</param>
        </member>
        <member name="M:com.Neogoma.Stardust.API.Relocation.AbstractMapManager.OnRequestFailed(System.String,System.String)">
            <summary>
            Handles the request failed on the class extensions
            </summary>
            <param name="jsonResult">Request results</param>
            <param name="key">Listener key</param>
        </member>
        <member name="M:com.Neogoma.Stardust.API.Relocation.AbstractMapManager.OnRequestSucess(System.String,System.String)">
            <summary>
            Handles the request success on class extension
            </summary>
            <param name="jsonResult">Request results</param>
            <param name="key">Listener key</param>
        </member>
        <member name="M:com.Neogoma.Stardust.API.Relocation.AbstractMapManager.OnPositionMatched(com.Neogoma.Stardust.Datamodel.MatchingPosition)">
            <summary>
            Called when the position on the map has been located
            </summary>
            <param name="positionMatched"></param>
        </member>
        <member name="M:com.Neogoma.Stardust.API.Relocation.AbstractMapManager.OnPositionMatchFailed">
            <summary>
            Called when the position on the map has not been found
            </summary>
        </member>
        <member name="M:com.Neogoma.Stardust.API.Relocation.AbstractMapManager.OnMapStartDownloading">
            <summary>
            Called the map starts downloading
            </summary>
        </member>
        <member name="M:com.Neogoma.Stardust.API.Relocation.AbstractMapManager.OnMapDownloaded(UnityEngine.GameObject)">
            <summary>
            Called when the map has finished downloading
            </summary>
            <param name="map"><see cref="T:UnityEngine.GameObject"/> containing the map object </param>
        </member>
        <member name="M:com.Neogoma.Stardust.API.Relocation.AbstractMapManager.DoOnAwake">
            <summary>
            Routine to call on awake
            </summary>
        </member>
        <member name="T:com.Neogoma.Stardust.API.Relocation.MapLocationPositioner">
            <summary>
            datas/operations on point cloud map
            </summary>
        </member>
        <member name="M:com.Neogoma.Stardust.API.Relocation.MapLocationPositioner.#ctor(UnityEngine.GameObject)">
            <summary>
            datas for point cloud map
            </summary>
            <param name="mapObject"></param>
        </member>
        <member name="M:com.Neogoma.Stardust.API.Relocation.MapLocationPositioner.MoveMapToPosition(com.Neogoma.Stardust.API.Relocation.CameraCheckData,com.Neogoma.Stardust.Datamodel.MatchingPosition)">
            <summary>
            Moves the map to position. IF YOU READ THIS METHOD I STRONGLY SUGGEST YOU GO TO https://www.mathsisfun.com/algebra/vectors.html
            Use of a pen and paper is recommended to understand this method, last but not least:
            Abandon hope all ye who enter here
            </summary>        
            <param name="pictureDatas">The picture position.</param>
            <param name="positionMatchedData">The position matched data.</param>
        </member>
        <member name="T:com.Neogoma.Stardust.API.Relocation.PointCloudPositioner">
            <summary>
            Class used to position the map relatively to the received datas
            </summary>
        </member>
        <member name="M:com.Neogoma.Stardust.API.Relocation.PointCloudPositioner.#ctor(com.Neogoma.Stardust.API.PersistenceObject.ObjectController,UnityEngine.GameObject,UnityEngine.Material)">
            <summary>
            Default construction of the point cloud positioner
            </summary>
            <param name="originPrefab"></param>
            <param name="persistentObject"></param>
            <param name="mat"></param>
        </member>
        <member name="T:com.Neogoma.Stardust.API.SessionController">
            <summary>
            Class used to manage all the sessions manipulations
            </summary>
        </member>
        <member name="M:com.Neogoma.Stardust.API.SessionController.CreateMappingSession">
            <summary>
            Creates a mapping session online
            </summary>
        </member>
        <member name="M:com.Neogoma.Stardust.API.SessionController.GetAllSessionsReady">
            <summary>
            Retrieves all the available mapping sessions
            </summary>
        </member>
        <member name="T:com.Neogoma.Stardust.API.CameraData.ColorExtractor">
            <summary>
            Class used to extract the camera color of a point passed in parameter
            </summary>
        </member>
        <member name="T:com.Neogoma.Stardust.Datamodel.Array`1">
            <summary>
            Class to represent an array of items to send to the API
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:com.Neogoma.Stardust.Datamodel.MatchingPosition">
            <summary>    
            datamodel for returned results
            </summary>
        </member>
        <member name="T:com.Neogoma.Stardust.Datamodel.Session">
            <summary>
            Class to represent a database session
            </summary>
        </member>
        <member name="T:com.Neogoma.Stardust.Maths.PointMathHelper">
            <summary>
            Helper class for maths with points
            </summary>
        </member>
        <member name="M:com.Neogoma.Stardust.Maths.PointMathHelper.Truncate(System.Single,System.Int32)">
            <summary>
            Truncates the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="digits">The digits.</param>
            <returns></returns>
        </member>
        <member name="M:com.Neogoma.Stardust.Maths.PointMathHelper.TruncateVector(UnityEngine.Vector3)">
            <summary>
            Truncates the vector.
            </summary>
            <param name="vec">The vec.</param>
            <returns></returns>
        </member>
        <member name="M:com.Neogoma.Stardust.Octree.BoundsOctree`1.#ctor(System.Single,UnityEngine.Vector3,System.Single,System.Single)">
            <summary>
            Constructor for the bounds octree.
            </summary>
            <param name="initialWorldSize">Size of the sides of the initial node, in metres. The octree will never shrink smaller than this.</param>
            <param name="initialWorldPos">Position of the centre of the initial node.</param>
            <param name="minNodeSize">Nodes will stop splitting if the new nodes would be smaller than this (metres).</param>
            <param name="loosenessVal">Clamped between 1 and 2. Values > 1 let nodes overlap.</param>
        </member>
        <member name="M:com.Neogoma.Stardust.Octree.BoundsOctree`1.Add(`0,UnityEngine.Bounds)">
            <summary>
            Add an object.
            </summary>
            <param name="obj">Object to add.</param>
            <param name="objBounds">3D bounding box around the object.</param>
        </member>
        <member name="M:com.Neogoma.Stardust.Octree.BoundsOctree`1.Remove(`0)">
            <summary>
            Remove an object. Makes the assumption that the object only exists once in the tree.
            </summary>
            <param name="obj">Object to remove.</param>
            <returns>True if the object was removed successfully.</returns>
        </member>
        <member name="M:com.Neogoma.Stardust.Octree.BoundsOctree`1.Remove(`0,UnityEngine.Bounds)">
            <summary>
            Removes the specified object at the given position. Makes the assumption that the object only exists once in the tree.
            </summary>
            <param name="obj">Object to remove.</param>
            <param name="objBounds">3D bounding box around the object.</param>
            <returns>True if the object was removed successfully.</returns>
        </member>
        <member name="M:com.Neogoma.Stardust.Octree.BoundsOctree`1.IsColliding(UnityEngine.Bounds)">
            <summary>
            Check if the specified bounds intersect with anything in the tree. See also: GetColliding.
            </summary>
            <param name="checkBounds">bounds to check.</param>
            <returns>True if there was a collision.</returns>
        </member>
        <member name="M:com.Neogoma.Stardust.Octree.BoundsOctree`1.IsColliding(UnityEngine.Ray,System.Single)">
            <summary>
            Check if the specified ray intersects with anything in the tree. See also: GetColliding.
            </summary>
            <param name="checkRay">ray to check.</param>
            <param name="maxDistance">distance to check.</param>
            <returns>True if there was a collision.</returns>
        </member>
        <member name="M:com.Neogoma.Stardust.Octree.BoundsOctree`1.GetColliding(System.Collections.Generic.List{`0},UnityEngine.Bounds)">
            <summary>
            Returns an array of objects that intersect with the specified bounds, if any. Otherwise returns an empty array. See also: IsColliding.
            </summary>
            <param name="collidingWith">list to store intersections.</param>
            <param name="checkBounds">bounds to check.</param>
            <returns>Objects that intersect with the specified bounds.</returns>
        </member>
        <member name="M:com.Neogoma.Stardust.Octree.BoundsOctree`1.GetColliding(System.Collections.Generic.List{`0},UnityEngine.Ray,System.Single)">
            <summary>
            Returns an array of objects that intersect with the specified ray, if any. Otherwise returns an empty array. See also: IsColliding.
            </summary>
            <param name="collidingWith">list to store intersections.</param>
            <param name="checkRay">ray to check.</param>
            <param name="maxDistance">distance to check.</param>
            <returns>Objects that intersect with the specified ray.</returns>
        </member>
        <member name="M:com.Neogoma.Stardust.Octree.BoundsOctree`1.DrawAllBounds">
            <summary>
            Draws node boundaries visually for debugging.
            Must be called from OnDrawGizmos externally. See also: DrawAllObjects.
            </summary>
        </member>
        <member name="M:com.Neogoma.Stardust.Octree.BoundsOctree`1.DrawAllObjects">
            <summary>
            Draws the bounds of all objects in the tree visually for debugging.
            Must be called from OnDrawGizmos externally. See also: DrawAllBounds.
            </summary>
        </member>
        <member name="M:com.Neogoma.Stardust.Octree.BoundsOctree`1.DrawCollisionChecks">
            <summary>
            Visualises collision checks from IsColliding and GetColliding.
            Collision visualisation code is automatically removed from builds so that collision checks aren't slowed down.
            </summary>
        </member>
        <member name="M:com.Neogoma.Stardust.Octree.BoundsOctree`1.AddCollisionCheck(UnityEngine.Bounds)">
            <summary>
            Used for visualising collision checks with DrawCollisionChecks.
            Automatically removed from builds so that collision checks aren't slowed down.
            </summary>
            <param name="checkBounds">bounds that were passed in to check for collisions.</param>
        </member>
        <member name="M:com.Neogoma.Stardust.Octree.BoundsOctree`1.AddCollisionCheck(UnityEngine.Ray)">
            <summary>
            Used for visualising collision checks with DrawCollisionChecks.
            Automatically removed from builds so that collision checks aren't slowed down.
            </summary>
            <param name="checkRay">ray that was passed in to check for collisions.</param>
        </member>
        <member name="M:com.Neogoma.Stardust.Octree.BoundsOctree`1.Grow(UnityEngine.Vector3)">
            <summary>
            Grow the octree to fit in all objects.
            </summary>
            <param name="direction">Direction to grow.</param>
        </member>
        <member name="M:com.Neogoma.Stardust.Octree.BoundsOctree`1.Shrink">
            <summary>
            Shrink the octree if possible, else leave it the same.
            </summary>
        </member>
        <member name="M:com.Neogoma.Stardust.Octree.BoundsOctreeNode`1.#ctor(System.Single,System.Single,System.Single,UnityEngine.Vector3)">
            <summary>
            Constructor.
            </summary>
            <param name="baseLengthVal">Length of this node, not taking looseness into account.</param>
            <param name="minSizeVal">Minimum size of nodes in this octree.</param>
            <param name="loosenessVal">Multiplier for baseLengthVal to get the actual size.</param>
            <param name="centerVal">Centre position of this node.</param>
        </member>
        <member name="M:com.Neogoma.Stardust.Octree.BoundsOctreeNode`1.Add(`0,UnityEngine.Bounds)">
            <summary>
            Add an object.
            </summary>
            <param name="obj">Object to add.</param>
            <param name="objBounds">3D bounding box around the object.</param>
            <returns>True if the object fits entirely within this node.</returns>
        </member>
        <member name="M:com.Neogoma.Stardust.Octree.BoundsOctreeNode`1.Remove(`0)">
            <summary>
            Remove an object. Makes the assumption that the object only exists once in the tree.
            </summary>
            <param name="obj">Object to remove.</param>
            <returns>True if the object was removed successfully.</returns>
        </member>
        <member name="M:com.Neogoma.Stardust.Octree.BoundsOctreeNode`1.Remove(`0,UnityEngine.Bounds)">
            <summary>
            Removes the specified object at the given position. Makes the assumption that the object only exists once in the tree.
            </summary>
            <param name="obj">Object to remove.</param>
            <param name="objBounds">3D bounding box around the object.</param>
            <returns>True if the object was removed successfully.</returns>
        </member>
        <member name="M:com.Neogoma.Stardust.Octree.BoundsOctreeNode`1.IsColliding(UnityEngine.Bounds@)">
            <summary>
            Check if the specified bounds intersect with anything in the tree. See also: GetColliding.
            </summary>
            <param name="checkBounds">Bounds to check.</param>
            <returns>True if there was a collision.</returns>
        </member>
        <member name="M:com.Neogoma.Stardust.Octree.BoundsOctreeNode`1.IsColliding(UnityEngine.Ray@,System.Single)">
            <summary>
            Check if the specified ray intersects with anything in the tree. See also: GetColliding.
            </summary>
            <param name="checkRay">Ray to check.</param>
            <param name="maxDistance">Distance to check.</param>
            <returns>True if there was a collision.</returns>
        </member>
        <member name="M:com.Neogoma.Stardust.Octree.BoundsOctreeNode`1.GetColliding(UnityEngine.Bounds@,System.Collections.Generic.List{`0})">
            <summary>
            Returns an array of objects that intersect with the specified bounds, if any. Otherwise returns an empty array. See also: IsColliding.
            </summary>
            <param name="checkBounds">Bounds to check. Passing by ref as it improves performance with structs.</param>
            <param name="result">List result.</param>
            <returns>Objects that intersect with the specified bounds.</returns>
        </member>
        <member name="M:com.Neogoma.Stardust.Octree.BoundsOctreeNode`1.GetColliding(UnityEngine.Ray@,System.Collections.Generic.List{`0},System.Single)">
            <summary>
            Returns an array of objects that intersect with the specified ray, if any. Otherwise returns an empty array. See also: IsColliding.
            </summary>
            <param name="checkRay">Ray to check. Passing by ref as it improves performance with structs.</param>
            <param name="maxDistance">Distance to check.</param>
            <param name="result">List result.</param>
            <returns>Objects that intersect with the specified ray.</returns>
        </member>
        <member name="M:com.Neogoma.Stardust.Octree.BoundsOctreeNode`1.SetChildren(com.Neogoma.Stardust.Octree.BoundsOctreeNode{`0}[])">
            <summary>
            Set the 8 children of this octree.
            </summary>
            <param name="childOctrees">The 8 new child nodes.</param>
        </member>
        <member name="M:com.Neogoma.Stardust.Octree.BoundsOctreeNode`1.DrawAllBounds(System.Single)">
            <summary>
            Draws node boundaries visually for debugging.
            Must be called from OnDrawGizmos externally. See also: DrawAllObjects.
            </summary>
            <param name="depth">Used for recurcive calls to this method.</param>
        </member>
        <member name="M:com.Neogoma.Stardust.Octree.BoundsOctreeNode`1.DrawAllObjects">
            <summary>
            Draws the bounds of all objects in the tree visually for debugging.
            Must be called from OnDrawGizmos externally. See also: DrawAllBounds.
            </summary>
        </member>
        <member name="M:com.Neogoma.Stardust.Octree.BoundsOctreeNode`1.ShrinkIfPossible(System.Single)">
            <summary>
            We can shrink the octree if:
            - This node is >= double minLength in length
            - All objects in the root node are within one octant
            - This node doesn't have children, or does but 7/8 children are empty
            We can also shrink it if there are no objects left at all!
            </summary>
            <param name="minLength">Minimum dimensions of a node in this octree.</param>
            <returns>The new root, or the existing one if we didn't shrink.</returns>
        </member>
        <member name="M:com.Neogoma.Stardust.Octree.BoundsOctreeNode`1.BestFitChild(UnityEngine.Vector3)">
            <summary>
            Find which child node this object would be most likely to fit in.
            </summary>
            <param name="objBounds">The object's bounds.</param>
            <returns>One of the eight child octants.</returns>
        </member>
        <member name="M:com.Neogoma.Stardust.Octree.BoundsOctreeNode`1.HasAnyObjects">
            <summary>
            Checks if this node or anything below it has something in it.
            </summary>
            <returns>True if this node or any of its children, grandchildren etc have something in them</returns>
        </member>
        <member name="M:com.Neogoma.Stardust.Octree.BoundsOctreeNode`1.SetValues(System.Single,System.Single,System.Single,UnityEngine.Vector3)">
            <summary>
            Set values for this node. 
            </summary>
            <param name="baseLengthVal">Length of this node, not taking looseness into account.</param>
            <param name="minSizeVal">Minimum size of nodes in this octree.</param>
            <param name="loosenessVal">Multiplier for baseLengthVal to get the actual size.</param>
            <param name="centerVal">Centre position of this node.</param>
        </member>
        <member name="M:com.Neogoma.Stardust.Octree.BoundsOctreeNode`1.SubAdd(`0,UnityEngine.Bounds)">
            <summary>
            Private counterpart to the public Add method.
            </summary>
            <param name="obj">Object to add.</param>
            <param name="objBounds">3D bounding box around the object.</param>
        </member>
        <member name="M:com.Neogoma.Stardust.Octree.BoundsOctreeNode`1.SubRemove(`0,UnityEngine.Bounds)">
            <summary>
            Private counterpart to the public <see cref="M:com.Neogoma.Stardust.Octree.BoundsOctreeNode`1.Remove(`0,UnityEngine.Bounds)"/> method.
            </summary>
            <param name="obj">Object to remove.</param>
            <param name="objBounds">3D bounding box around the object.</param>
            <returns>True if the object was removed successfully.</returns>
        </member>
        <member name="M:com.Neogoma.Stardust.Octree.BoundsOctreeNode`1.Split">
            <summary>
            Splits the octree into eight children.
            </summary>
        </member>
        <member name="M:com.Neogoma.Stardust.Octree.BoundsOctreeNode`1.Merge">
            <summary>
            Merge all children into this node - the opposite of Split.
            Note: We only have to check one level down since a merge will never happen if the children already have children,
            since THAT won't happen unless there are already too many objects to merge.
            </summary>
        </member>
        <member name="M:com.Neogoma.Stardust.Octree.BoundsOctreeNode`1.Encapsulates(UnityEngine.Bounds,UnityEngine.Bounds)">
            <summary>
            Checks if outerBounds encapsulates innerBounds.
            </summary>
            <param name="outerBounds">Outer bounds.</param>
            <param name="innerBounds">Inner bounds.</param>
            <returns>True if innerBounds is fully encapsulated by outerBounds.</returns>
        </member>
        <member name="M:com.Neogoma.Stardust.Octree.BoundsOctreeNode`1.ShouldMerge">
            <summary>
            Checks if there are few enough objects in this node and its children that the children should all be merged into this.
            </summary>
            <returns>True there are less or the same abount of objects in this and its children than numObjectsAllowed.</returns>
        </member>
        <member name="M:com.Neogoma.Stardust.Octree.PointOctree`1.#ctor(System.Single,UnityEngine.Vector3,System.Single)">
            <summary>
            Constructor for the point octree.
            </summary>
            <param name="initialWorldSize">Size of the sides of the initial node. The octree will never shrink smaller than this.</param>
            <param name="initialWorldPos">Position of the centre of the initial node.</param>
            <param name="minNodeSize">Nodes will stop splitting if the new nodes would be smaller than this.</param>
        </member>
        <member name="M:com.Neogoma.Stardust.Octree.PointOctree`1.Add(`0,UnityEngine.Vector3)">
            <summary>
            Add an object.
            </summary>
            <param name="obj">Object to add.</param>
            <param name="objPos">Position of the object.</param>
        </member>
        <member name="M:com.Neogoma.Stardust.Octree.PointOctree`1.Remove(`0)">
            <summary>
            Remove an object. Makes the assumption that the object only exists once in the tree.
            </summary>
            <param name="obj">Object to remove.</param>
            <returns>True if the object was removed successfully.</returns>
        </member>
        <member name="M:com.Neogoma.Stardust.Octree.PointOctree`1.Remove(`0,UnityEngine.Vector3)">
            <summary>
            Removes the specified object at the given position. Makes the assumption that the object only exists once in the tree.
            </summary>
            <param name="obj">Object to remove.</param>
            <param name="objPos">Position of the object.</param>
            <returns>True if the object was removed successfully.</returns>
        </member>
        <member name="M:com.Neogoma.Stardust.Octree.PointOctree`1.GetNearbyNonAlloc(UnityEngine.Ray,System.Single,System.Collections.Generic.List{`0})">
            <summary>
            Returns objects that are within <paramref name="maxDistance"/> of the specified ray.
            If none, returns false. Uses supplied list for results.
            </summary>
            <param name="ray">The ray. Passing as ref to improve performance since it won't have to be copied.</param>
            <param name="maxDistance">Maximum distance from the ray to consider</param>
            <param name="nearBy">Pre-initialized list to populate</param>
            <returns>True if items are found, false if not</returns>
        </member>
        <member name="M:com.Neogoma.Stardust.Octree.PointOctree`1.GetNearby(UnityEngine.Ray,System.Single)">
            <summary>
            Returns objects that are within <paramref name="maxDistance"/> of the specified ray.
            If none, returns an empty array (not null).
            </summary>
            <param name="ray">The ray. Passing as ref to improve performance since it won't have to be copied.</param>
            <param name="maxDistance">Maximum distance from the ray to consider.</param>
            <returns>Objects within range.</returns>
        </member>
        <member name="M:com.Neogoma.Stardust.Octree.PointOctree`1.GetNearby(UnityEngine.Vector3,System.Single)">
            <summary>
            Returns objects that are within <paramref name="maxDistance"/> of the specified position.
            If none, returns an empty array (not null).
            </summary>
            <param name="position">The position. Passing as ref to improve performance since it won't have to be copied.</param>
            <param name="maxDistance">Maximum distance from the position to consider.</param>
            <returns>Objects within range.</returns>
        </member>
        <member name="M:com.Neogoma.Stardust.Octree.PointOctree`1.GetNearbyNonAlloc(UnityEngine.Vector3,System.Single,System.Collections.Generic.List{`0})">
            <summary>
            Returns objects that are within <paramref name="maxDistance"/> of the specified position.
            If none, returns false. Uses supplied list for results.
            </summary>
            <param name="maxDistance">Maximum distance from the position to consider</param>
            <param name="nearBy">Pre-initialized list to populate</param>
            <returns>True if items are found, false if not</returns>
        </member>
        <member name="M:com.Neogoma.Stardust.Octree.PointOctree`1.GetAll">
            <summary>
            Return all objects in the tree.
            If none, returns an empty array (not null).
            </summary>
            <returns>All objects.</returns>
        </member>
        <member name="M:com.Neogoma.Stardust.Octree.PointOctree`1.DrawAllBounds">
            <summary>
            Draws node boundaries visually for debugging.
            Must be called from OnDrawGizmos externally. See also: DrawAllObjects.
            </summary>
        </member>
        <member name="M:com.Neogoma.Stardust.Octree.PointOctree`1.DrawAllObjects">
            <summary>
            Draws the bounds of all objects in the tree visually for debugging.
            Must be called from OnDrawGizmos externally. See also: DrawAllBounds.
            </summary>
        </member>
        <member name="M:com.Neogoma.Stardust.Octree.PointOctree`1.Grow(UnityEngine.Vector3)">
            <summary>
            Grow the octree to fit in all objects.
            </summary>
            <param name="direction">Direction to grow.</param>
        </member>
        <member name="M:com.Neogoma.Stardust.Octree.PointOctree`1.Shrink">
            <summary>
            Shrink the octree if possible, else leave it the same.
            </summary>
        </member>
        <member name="M:com.Neogoma.Stardust.Octree.PointOctreeNode`1.#ctor(System.Single,System.Single,UnityEngine.Vector3)">
            <summary>
            Constructor.
            </summary>
            <param name="baseLengthVal">Length of this node, not taking looseness into account.</param>
            <param name="minSizeVal">Minimum size of nodes in this octree.</param>
            <param name="centerVal">Centre position of this node.</param>
        </member>
        <member name="M:com.Neogoma.Stardust.Octree.PointOctreeNode`1.Add(`0,UnityEngine.Vector3)">
            <summary>
            Add an object.
            </summary>
            <param name="obj">Object to add.</param>
            <param name="objPos">Position of the object.</param>
            <returns></returns>
        </member>
        <member name="M:com.Neogoma.Stardust.Octree.PointOctreeNode`1.Remove(`0)">
            <summary>
            Remove an object. Makes the assumption that the object only exists once in the tree.
            </summary>
            <param name="obj">Object to remove.</param>
            <returns>True if the object was removed successfully.</returns>
        </member>
        <member name="M:com.Neogoma.Stardust.Octree.PointOctreeNode`1.Remove(`0,UnityEngine.Vector3)">
            <summary>
            Removes the specified object at the given position. Makes the assumption that the object only exists once in the tree.
            </summary>
            <param name="obj">Object to remove.</param>
            <param name="objPos">Position of the object.</param>
            <returns>True if the object was removed successfully.</returns>
        </member>
        <member name="M:com.Neogoma.Stardust.Octree.PointOctreeNode`1.GetNearby(UnityEngine.Ray@,System.Single,System.Collections.Generic.List{`0})">
            <summary>
            Return objects that are within maxDistance of the specified ray.
            </summary>
            <param name="ray">The ray.</param>
            <param name="maxDistance">Maximum distance from the ray to consider.</param>
            <param name="result">List result.</param>
            <returns>Objects within range.</returns>
        </member>
        <member name="M:com.Neogoma.Stardust.Octree.PointOctreeNode`1.GetNearby(UnityEngine.Vector3@,System.Single,System.Collections.Generic.List{`0})">
            <summary>
            Return objects that are within <paramref name="maxDistance"/> of the specified position.
            </summary>
            <param name="position">The position.</param>
            <param name="maxDistance">Maximum distance from the position to consider.</param>
            <param name="result">List result.</param>
            <returns>Objects within range.</returns>
        </member>
        <member name="M:com.Neogoma.Stardust.Octree.PointOctreeNode`1.GetAll(System.Collections.Generic.List{`0})">
            <summary>
            Return all objects in the tree.
            </summary>
            <returns>All objects.</returns>
        </member>
        <member name="M:com.Neogoma.Stardust.Octree.PointOctreeNode`1.SetChildren(com.Neogoma.Stardust.Octree.PointOctreeNode{`0}[])">
            <summary>
            Set the 8 children of this octree.
            </summary>
            <param name="childOctrees">The 8 new child nodes.</param>
        </member>
        <member name="M:com.Neogoma.Stardust.Octree.PointOctreeNode`1.DrawAllBounds(System.Single)">
            <summary>
            Draws node boundaries visually for debugging.
            Must be called from OnDrawGizmos externally. See also: DrawAllObjects.
            </summary>
            <param name="depth">Used for recurcive calls to this method.</param>
        </member>
        <member name="M:com.Neogoma.Stardust.Octree.PointOctreeNode`1.DrawAllObjects">
            <summary>
            Draws the bounds of all objects in the tree visually for debugging.
            Must be called from OnDrawGizmos externally. See also: DrawAllBounds.
            NOTE: marker.tif must be placed in your Unity /Assets/Gizmos subfolder for this to work.
            </summary>
        </member>
        <member name="M:com.Neogoma.Stardust.Octree.PointOctreeNode`1.ShrinkIfPossible(System.Single)">
            <summary>
            We can shrink the octree if:
            - This node is >= double minLength in length
            - All objects in the root node are within one octant
            - This node doesn't have children, or does but 7/8 children are empty
            We can also shrink it if there are no objects left at all!
            </summary>
            <param name="minLength">Minimum dimensions of a node in this octree.</param>
            <returns>The new root, or the existing one if we didn't shrink.</returns>
        </member>
        <member name="M:com.Neogoma.Stardust.Octree.PointOctreeNode`1.BestFitChild(UnityEngine.Vector3)">
            <summary>
            Find which child node this object would be most likely to fit in.
            </summary>
            <param name="objPos">The object's position.</param>
            <returns>One of the eight child octants.</returns>
        </member>
        <member name="M:com.Neogoma.Stardust.Octree.PointOctreeNode`1.HasAnyObjects">
            <summary>
            Checks if this node or anything below it has something in it.
            </summary>
            <returns>True if this node or any of its children, grandchildren etc have something in them</returns>
        </member>
        <member name="M:com.Neogoma.Stardust.Octree.PointOctreeNode`1.SetValues(System.Single,System.Single,UnityEngine.Vector3)">
            <summary>
            Set values for this node. 
            </summary>
            <param name="baseLengthVal">Length of this node, not taking looseness into account.</param>
            <param name="minSizeVal">Minimum size of nodes in this octree.</param>
            <param name="centerVal">Centre position of this node.</param>
        </member>
        <member name="M:com.Neogoma.Stardust.Octree.PointOctreeNode`1.SubAdd(`0,UnityEngine.Vector3)">
            <summary>
            Private counterpart to the public Add method.
            </summary>
            <param name="obj">Object to add.</param>
            <param name="objPos">Position of the object.</param>
        </member>
        <member name="M:com.Neogoma.Stardust.Octree.PointOctreeNode`1.SubRemove(`0,UnityEngine.Vector3)">
            <summary>
            Private counterpart to the public <see cref="M:com.Neogoma.Stardust.Octree.PointOctreeNode`1.Remove(`0,UnityEngine.Vector3)"/> method.
            </summary>
            <param name="obj">Object to remove.</param>
            <param name="objPos">Position of the object.</param>
            <returns>True if the object was removed successfully.</returns>
        </member>
        <member name="M:com.Neogoma.Stardust.Octree.PointOctreeNode`1.Split">
            <summary>
            Splits the octree into eight children.
            </summary>
        </member>
        <member name="M:com.Neogoma.Stardust.Octree.PointOctreeNode`1.Merge">
            <summary>
            Merge all children into this node - the opposite of Split.
            Note: We only have to check one level down since a merge will never happen if the children already have children,
            since THAT won't happen unless there are already too many objects to merge.
            </summary>
        </member>
        <member name="M:com.Neogoma.Stardust.Octree.PointOctreeNode`1.Encapsulates(UnityEngine.Bounds,UnityEngine.Vector3)">
            <summary>
            Checks if outerBounds encapsulates the given point.
            </summary>
            <param name="outerBounds">Outer bounds.</param>
            <param name="point">Point.</param>
            <returns>True if innerBounds is fully encapsulated by outerBounds.</returns>
        </member>
        <member name="M:com.Neogoma.Stardust.Octree.PointOctreeNode`1.ShouldMerge">
            <summary>
            Checks if there are few enough objects in this node and its children that the children should all be merged into this.
            </summary>
            <returns>True there are less or the same abount of objects in this and its children than numObjectsAllowed.</returns>
        </member>
        <member name="M:com.Neogoma.Stardust.Octree.PointOctreeNode`1.SqrDistanceToRay(UnityEngine.Ray,UnityEngine.Vector3)">
            <summary>
            Returns the closest distance to the given ray from a point.
            </summary>
            <param name="ray">The ray.</param>
            <param name="point">The point to check distance from the ray.</param>
            <returns>Squared distance from the point to the closest point of the ray.</returns>
        </member>
        <member name="T:com.Neogoma.Stardust.DataRendering.PCLDisplayer">
            <summary>
            Class used to render the point cloud as a mesh efficientily
            </summary>
        </member>
    </members>
</doc>
